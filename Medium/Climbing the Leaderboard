import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

    public static List<Integer> climbingLeaderboard(List<Integer> ranked, List<Integer> player) {
    // Write your code here
    int[] rank = ranked.stream().mapToInt(i->i).toArray();
    int[] alice = player.stream().mapToInt(i->i).toArray();
    ArrayList<Integer> places = new ArrayList<Integer>();
    int place=1;
    places.add(rank[0]);
    for (int i=1;i<rank.length;i++){
        int curplace=place-1;
        int curscore=rank[i];
        if(curscore!= places.get(curplace)){
            place++;
            places.add(curscore);
        }
    }
int[] ranks = places.stream().mapToInt(i->i).toArray();
ArrayList<Integer> scores = new ArrayList<Integer>();
int index=0;
for (int i=0; i<alice.length;i++){
    for (int j=(ranks.length-1);j>=0;j--){    
        if (alice[i]>ranks[j]){
            index=j+1;
        }
        if (alice[i]<ranks[j]){
            index=j-1;
        }
        
       if (alice[i]==ranks[j]){
            index=j;
        }
    }
    scores.add(index);
}


return scores;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int rankedCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ranked = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int playerCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> player = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.climbingLeaderboard(ranked, player);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
